<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haxe programming language - Code Cookbook</title><link>https://code.haxe.org/</link><description>Easy to read Haxe programming language examples.</description><managingEditor>contact@haxe.org (Haxe Foundation)</managingEditor><docs>http://blogs.law.harvard.edu/tech/rss</docs><language>en</language><lastBuildDate>Wed, 18 Mar 2020 11:14:57 GMT</lastBuildDate><atom:link href="https://code.haxe.org/rss.xml" rel="self" type="application/rss+xml"/><item><title>Compiling c++ code on Windows using mingw</title><link>https://code.haxe.org/category/other/compiling-cpp-code-windows-mingw.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/compiling-cpp-code-windows-mingw.html</guid><description>On Windows, the compiler by default expects an installation of Microsoft Visual Studio Community edition when targeting c++. </description><pubDate>Mon, 21 Oct 2019 01:01:01 GMT</pubDate></item><item><title>Writing target-specific modules differentiated by filename</title><link>https://code.haxe.org/category/compilation/target-specific-modules-diff-by-filename.html</link><guid isPermaLink="true">https://code.haxe.org/category/compilation/target-specific-modules-diff-by-filename.html</guid><description>The standard way of naming module files in haxe is &amp;lt;Modulename&amp;gt;.hx - the module name spelled with first letter capital, and ending with .hx as extension. Let's say we have the following class called Example:</description><pubDate>Sun, 20 Oct 2019 01:01:01 GMT</pubDate></item><item><title>stdin, stdout, stderr</title><link>https://code.haxe.org/category/beginner/stdin-stdout-stderr.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/stdin-stdout-stderr.html</guid><description>Reading from stdin and writing to stdout and stderr.</description><pubDate>Fri, 16 Aug 2019 01:01:01 GMT</pubDate></item><item><title>Threading macro like Clojure and pipe operator</title><link>https://code.haxe.org/category/macros/threading-macro.html</link><guid isPermaLink="true">https://code.haxe.org/category/macros/threading-macro.html</guid><description>Introduction</description><pubDate>Mon, 01 Jul 2019 01:01:01 GMT</pubDate></item><item><title>Prototype SSL Socket Server</title><link>https://code.haxe.org/category/other/ssl-socket-server.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/ssl-socket-server.html</guid><description>This write-up was inspired by this stack overflow question. While I've worked with sockets before, I wanted to prototype a Haxe HXCPP socket server leveraging secure SSL connections.</description><pubDate>Thu, 20 Jun 2019 01:01:01 GMT</pubDate></item><item><title>Haxe to Emscripten</title><link>https://code.haxe.org/category/beginner/haxe-to-emscripten-hello-world.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/haxe-to-emscripten-hello-world.html</guid><description>This is a hello world example which will be compiled and linked to Emscripten.</description><pubDate>Mon, 17 Jun 2019 01:01:01 GMT</pubDate></item><item><title>Zip files</title><link>https://code.haxe.org/category/other/haxe-zip.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/haxe-zip.html</guid><description>The haxe.zip package allows to zip and unzip files and directories using Haxe. This example shows how to use it.</description><pubDate>Mon, 26 Nov 2018 01:01:01 GMT</pubDate></item><item><title>Publish to Haxelib using Travis and Github Releases</title><link>https://code.haxe.org/category/other/deploy-to-haxelib-using-travis-and-github-releases.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/deploy-to-haxelib-using-travis-and-github-releases.html</guid><description>This tutorial will help you publish your library automatically to lib.haxe.org when you create a release on GitHub.</description><pubDate>Tue, 17 Jul 2018 01:01:01 GMT</pubDate></item><item><title>A fixed ring array</title><link>https://code.haxe.org/category/data-structures/ring-array.html</link><guid isPermaLink="true">https://code.haxe.org/category/data-structures/ring-array.html</guid><description>A fixed ring array is especially useful when you need a hard upper bound for how much data can be in the queue.</description><pubDate>Sat, 14 Apr 2018 01:01:01 GMT</pubDate></item><item><title>ML-Style Parse Tree Evaluation</title><link>https://code.haxe.org/category/functional-programming/functional-style-expression-evaluation.html</link><guid isPermaLink="true">https://code.haxe.org/category/functional-programming/functional-style-expression-evaluation.html</guid><description>ML-like languages are great for creating interpreters or compilers, by virtue of Algebraic Data Types. Haxe's enum allow for writing similarly elegant code.</description><pubDate>Mon, 12 Feb 2018 01:01:01 GMT</pubDate></item><item><title>Invoke object method by string</title><link>https://code.haxe.org/category/beginner/reflection-method-call.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/reflection-method-call.html</guid><description>To invoke method by it's name you will need to use Reflection API.</description><pubDate>Tue, 23 Jan 2018 01:01:01 GMT</pubDate></item><item><title>Observer</title><link>https://code.haxe.org/category/design-patterns/observer.html</link><guid isPermaLink="true">https://code.haxe.org/category/design-patterns/observer.html</guid><description>This is a basic example of the Observer design pattern in Haxe. The pattern makes use of an Observer interface and an Observable base class to notify objects when another object's property is changed so that they can react accordingly.</description><pubDate>Tue, 02 Jan 2018 01:01:01 GMT</pubDate></item><item><title>Using Iterators as Generic Type Parameters</title><link>https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</guid><description>Iterators are a helpful Haxe structure. Any structure that implements the next and hasNext functions with the appropriate signature will allow you build a for loop. Arrays have an iterator() function that returns exactly this, and you don't need to call it, the for language construction does it for you.</description><pubDate>Tue, 21 Nov 2017 01:01:01 GMT</pubDate></item><item><title>Array access of a database manager</title><link>https://code.haxe.org/category/abstract-types/array-access-db-manager.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/array-access-db-manager.html</guid><description>When using SPOD database objects, or the record-macros library, instances of database models can be accessed using the manager's get function:</description><pubDate>Tue, 21 Nov 2017 01:01:01 GMT</pubDate></item><item><title>JavaScript inline web workers in Haxe</title><link>https://code.haxe.org/category/javascript/javascript-inline-workers.html</link><guid isPermaLink="true">https://code.haxe.org/category/javascript/javascript-inline-workers.html</guid><description>JavaScript workers make it possible to perform costly calculations (media decoding etc, crypt calculations etc.) in a background thread, without blocking the main UI. There are lots of articles about workers on the net:</description><pubDate>Tue, 21 Nov 2017 01:01:01 GMT</pubDate></item><item><title>Pattern matching</title><link>https://code.haxe.org/category/beginner/pattern-matching.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/pattern-matching.html</guid><description>This article helps to learn pattern matching and all of its type of matching in practice. The article covers basic matching, variable capture, guards, extractors and enum/structure matching.</description><pubDate>Thu, 31 Aug 2017 01:01:01 GMT</pubDate></item><item><title>Base64 encoding</title><link>https://code.haxe.org/category/other/base64-encoding.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/base64-encoding.html</guid><description>This article shows how to use base64 in Haxe and how to use a custom charset.</description><pubDate>Thu, 24 Aug 2017 01:01:01 GMT</pubDate></item><item><title>Using strings</title><link>https://code.haxe.org/category/beginner/strings.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/strings.html</guid><description>Defining string literals take be done by wrapping text inside double or single quotes:</description><pubDate>Tue, 11 Jul 2017 01:01:01 GMT</pubDate></item><item><title>Include a file next to a Haxe module file</title><link>https://code.haxe.org/category/macros/include-file-next-to-module-file.html</link><guid isPermaLink="true">https://code.haxe.org/category/macros/include-file-next-to-module-file.html</guid><description>This example lets you take a file next to the current module .hx file and include its file content. That can be very useful if you want to separate (for example) view templates, shader sources or other multiline texts from the Haxe source. The articles demonstrates how to do it with an expression macro but also with a build macro.</description><pubDate>Tue, 04 Jul 2017 01:01:01 GMT</pubDate></item><item><title>Working with date and time</title><link>https://code.haxe.org/category/beginner/date-time.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/date-time.html</guid><description>The Date class provides a basic structure for date and time related information. This article shows how to work with the date and time tools.</description><pubDate>Tue, 09 May 2017 01:01:01 GMT</pubDate></item></channel></rss>